---
import Layout from "../layouts/Layout.astro";
import Navigation from "../components/Navigation.astro";
import Footer from "../components/Footer.astro";
---

<Layout title="Dashboard — Vulnera" description="Overview of reports, projects, and recent activity.">
  <Navigation />

  <section id="main" class="relative min-h-screen overflow-hidden bg-black" aria-labelledby="dash-title" transition:animate="fade">
    <!-- Background Layers -->
    <div class="absolute inset-0 z-0">
      <div class="absolute inset-0 matrix-rain opacity-20"></div>
      <div class="absolute inset-0 bg-gradient-to-r from-black via-black/80 to-black/60"></div>
      <div class="absolute inset-0 bg-gradient-to-b from-transparent via-matrix-900/20 to-black/80"></div>
    </div>

    <!-- Content -->
    <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 py-16">
      <header class="mb-6 sm:mb-10">
        <div class="text-cyber-400 font-mono text-xs sm:text-sm">root@vulnera:~$</div>
  <h1 id="dash-title" class="text-2xl sm:text-3xl md:text-4xl font-bold text-white font-mono tracking-wider mt-6 mb-4 sm:mb-6">
          <span class="text-cyber-400">&gt;</span> DASHBOARD
        </h1>
        <p class="text-matrix-300 mt-2 text-sm sm:text-base">Live overview of your analysis activity</p>
      </header>

      <!-- Controls -->
      <div class="mb-4 flex flex-col sm:flex-row gap-3 sm:gap-4 items-stretch sm:items-center justify-between">
        <div class="flex gap-2">
          <select id="filter-ecosystem" class="bg-black/60 border border-cyber-400/30 text-matrix-200 px-3 py-2 rounded-lg text-sm">
            <option value="all">ALL_ECOSYSTEMS</option>
            <option value="npm">NPM</option>
            <option value="pypi">PYPI</option>
            <option value="maven">MAVEN</option>
            <option value="cargo">CARGO</option>
            <option value="nuget">NUGET</option>
            <option value="rubygems">RUBYGEMS</option>
          </select>
          <select id="filter-severity" class="bg-black/60 border border-cyber-400/30 text-matrix-200 px-3 py-2 rounded-lg text-sm">
            <option value="all">ALL_SEVERITIES</option>
            <option value="critical">CRITICAL</option>
            <option value="high">HIGH</option>
            <option value="medium">MEDIUM</option>
            <option value="low">LOW</option>
            <option value="none">NONE</option>
          </select>
        </div>
        <div class="flex gap-2">
          <button id="btn-refresh" class="inline-flex items-center bg-gradient-to-r from-cyber-600 to-matrix-600 hover:from-cyber-500 hover:to-matrix-500 text-black px-3 py-2 rounded-lg font-mono text-sm terminal-border"><span class="mr-2">&gt;</span> REFRESH</button>
        </div>
      </div>

      <!-- Stats Grid -->
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6">
        <div class="terminal-border bg-black/60 rounded-lg p-4 sm:p-6">
          <div class="text-cyber-400 text-xs sm:text-sm mb-1">REPORTS_TOTAL</div>
          <div id="stat-reports" class="text-2xl sm:text-3xl lg:text-4xl text-white font-mono">--</div>
        </div>
        <div class="terminal-border bg-black/60 rounded-lg p-4 sm:p-6">
          <div class="text-cyber-400 text-xs sm:text-sm mb-1">PROJECTS_ANALYZED</div>
          <div id="stat-projects" class="text-2xl sm:text-3xl lg:text-4xl text-white font-mono">--</div>
        </div>
        <div class="terminal-border bg-black/60 rounded-lg p-4 sm:p-6">
          <div class="text-cyber-400 text-xs sm:text-sm mb-1">VULNERABLE_PROJECTS</div>
          <div id="stat-vuln" class="text-2xl sm:text-3xl lg:text-4xl text-yellow-400 font-mono">--</div>
        </div>
        <div class="terminal-border bg-black/60 rounded-lg p-4 sm:p-6">
          <div class="text-cyber-400 text-xs sm:text-sm mb-1">LAST_SCAN_AT</div>
          <div id="stat-last" class="text-sm sm:text-base text-matrix-300 font-mono break-anywhere">--</div>
        </div>
      </div>

      <!-- Trend & Activity -->
      <section class="mt-8 sm:mt-10 grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6">
        <!-- Trend Chart -->
        <div class="lg:col-span-2 terminal-border bg-black/70 rounded-xl p-4 sm:p-6">
          <div class="flex items-center justify-between mb-3">
            <h2 class="text-cyber-400 font-mono text-lg">LAST_7_DAYS_TREND</h2>
            <span class="text-xs text-gray-400">reports vs vulns</span>
          </div>
          <div class="overflow-x-auto">
            <svg id="trend-svg" viewBox="0 0 600 220" class="w-full h-48 sm:h-56">
              <rect x="0" y="0" width="600" height="220" fill="transparent" />
              <!-- axes -->
              <line x1="40" y1="200" x2="580" y2="200" stroke="#1affef55" />
              <line x1="40" y1="20" x2="40" y2="200" stroke="#1affef55" />
              <!-- paths inserted by JS -->
            </svg>
          </div>
        </div>
        <!-- Recent Activity -->
        <div class="terminal-border bg-black/70 rounded-xl p-4 sm:p-6">
          <div class="flex items-center justify-between mb-3">
            <h2 class="text-cyber-400 font-mono text-lg">RECENT_ACTIVITY</h2>
            <span class="text-xs text-gray-400">v1.1</span>
          </div>
          <ul id="recent-list" class="space-y-2 text-matrix-300 text-sm font-mono">
            <li>Loading…</li>
          </ul>
        </div>
      </section>

      <!-- Reports Table -->
      <section class="mt-8 sm:mt-10">
        <div class="terminal-border bg-black/70 rounded-xl p-4 sm:p-6">
          <div class="flex items-center justify-between mb-3">
            <h2 class="text-cyber-400 font-mono text-lg">RECENT_REPORTS</h2>
            <button id="btn-export" class="inline-flex items-center border border-cyber-400/40 text-cyber-300 px-3 py-1.5 rounded-lg font-mono text-xs">EXPORT_CSV</button>
          </div>
          <div class="overflow-x-auto">
            <table class="min-w-full text-left text-sm text-matrix-300 font-mono">
              <thead class="text-cyber-300">
                <tr>
                  <th class="py-2 pr-4">ID</th>
                  <th class="py-2 pr-4">PROJECT</th>
                  <th class="py-2 pr-4">SEVERITY</th>
                  <th class="py-2 pr-4">ISSUES</th>
                  <th class="py-2">CREATED_AT</th>
                </tr>
              </thead>
              <tbody id="reports-tbody">
                <tr><td class="py-2" colspan="5">Loading…</td></tr>
              </tbody>
            </table>
          </div>
        </div>
      </section>

      <!-- Projects Grid -->
      <section class="mt-8 sm:mt-10">
        <div class="terminal-border bg-black/70 rounded-xl p-4 sm:p-6">
          <h2 class="text-cyber-400 font-mono text-lg mb-3">PROJECTS</h2>
          <div id="projects-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"></div>
        </div>
      </section>
    </div>
  </section>

  <Footer />

  <script type="module">
    // Public dashboard: no auth guard

  // Mock data 
  const mockMod = await import('/src/utils/mock/dashboard');

    function renderOverview(o) {
      const elR = document.getElementById('stat-reports');
      const elP = document.getElementById('stat-projects');
      const elV = document.getElementById('stat-vuln');
      const elL = document.getElementById('stat-last');
      if (elR) elR.textContent = String(o.reportsTotal ?? 0);
      if (elP) elP.textContent = String(o.projectsAnalyzed ?? 0);
      if (elV) elV.textContent = o.vulnerableProjects != null ? String(o.vulnerableProjects) : '--';
      if (elL) elL.textContent = o.lastScanAt || '--';
    }

    function renderRecent(list) {
      const recent = document.getElementById('recent-list');
      if (!recent) return;
      recent.innerHTML = '';
      for (const it of list) {
        const li = document.createElement('li');
        li.textContent = it;
        recent.appendChild(li);
      }
    }

    function renderReports(reports) {
      const body = document.getElementById('reports-tbody');
      if (!body) return;
      body.innerHTML = '';
      for (const r of reports) {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td class="py-2 pr-4 text-gray-400">${r.id.slice(-6)}</td>
                        <td class="py-2 pr-4">${r.project}</td>
                        <td class="py-2 pr-4"><span class="${sevClass(r.severity)}">${r.severity.toUpperCase()}</span></td>
                        <td class="py-2 pr-4">${r.issues}</td>
                        <td class="py-2">${new Date(r.createdAt).toLocaleString()}</td>`;
        body.appendChild(tr);
      }
    }

    function sevClass(s) {
      switch (s) {
        case 'critical': return 'text-red-400';
        case 'high': return 'text-red-300';
        case 'medium': return 'text-yellow-300';
        case 'low': return 'text-matrix-300';
        default: return 'text-gray-400';
      }
    }

    function renderProjects(projects) {
      const grid = document.getElementById('projects-grid');
      if (!grid) return;
      grid.innerHTML = '';
      for (const p of projects) {
        const card = document.createElement('div');
        card.className = 'terminal-border bg-black/60 rounded-lg p-4 flex flex-col gap-1';
        card.innerHTML = `<div class="text-white font-mono">${p.name}</div>
                          <div class="text-xs text-cyber-300">ECO: ${p.ecosystem.toUpperCase()}</div>
                          <div class="text-xs text-matrix-300">Last: ${new Date(p.lastScanAt).toLocaleString()}</div>
                          <div class="text-xs ${p.vulnerabilities>0?'text-yellow-300':'text-cyber-300'}">Vulns: ${p.vulnerabilities}</div>`;
        grid.appendChild(card);
      }
    }

    function renderTrend(trend) {
      const svg = document.getElementById('trend-svg');
      if (!(svg instanceof SVGElement)) return;
      // Remove existing paths
      svg.querySelectorAll('path[data-series]').forEach(n => n.remove());
      svg.querySelectorAll('text[data-tick]').forEach(n => n.remove());

      const W = 600, H = 220, X0 = 40, Y0 = 200, X1 = 580, Y1 = 20;
      const n = trend.length;
      const maxReports = Math.max(1, ...trend.map(t => t.reports));
      const maxVulns = Math.max(1, ...trend.map(t => t.vulns));
      const maxY = Math.max(maxReports, maxVulns);
      const stepX = (X1 - X0) / Math.max(1, n - 1);

      const toPoint = (i, v) => {
        const x = X0 + i * stepX;
        const y = Y0 - (v / maxY) * (Y0 - Y1);
        return `${x},${y}`;
      };

      const reportsPts = trend.map((t, i) => toPoint(i, t.reports)).join(' ');
      const vulnsPts = trend.map((t, i) => toPoint(i, t.vulns)).join(' ');

      const p1 = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');
      p1.setAttribute('points', reportsPts);
      p1.setAttribute('stroke', '#1affef');
      p1.setAttribute('fill', 'none');
      p1.setAttribute('stroke-width', '2');
      p1.setAttribute('data-series', 'reports');
      svg.appendChild(p1);

      const p2 = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');
      p2.setAttribute('points', vulnsPts);
      p2.setAttribute('stroke', '#4ade80');
      p2.setAttribute('fill', 'none');
      p2.setAttribute('stroke-width', '2');
      p2.setAttribute('data-series', 'vulns');
      svg.appendChild(p2);

      // X ticks
      trend.forEach((t, i) => {
        const tx = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        tx.setAttribute('x', String(X0 + i * stepX));
        tx.setAttribute('y', '212');
        tx.setAttribute('fill', '#86efac');
        tx.setAttribute('font-size', '10');
        tx.setAttribute('text-anchor', 'middle');
        tx.setAttribute('data-tick', 'x');
        tx.textContent = t.day.slice(5);
        svg.appendChild(tx);
      });
    }

  let currentReportsFiltered = [];
  async function loadAll() {
      // Generate mock
      const overview = mockMod.generateOverview();
      const reports = mockMod.generateReports(8);
      const projects = mockMod.generateProjects(6);
      const trend = mockMod.generateTrend(7);

      // No API override; using mock overview exclusively

  // Apply filters (client-side) to reports/projects
      const eco = document.getElementById('filter-ecosystem')?.value || 'all';
      const sev = document.getElementById('filter-severity')?.value || 'all';
      const filteredReports = reports.filter(r => (sev === 'all' ? true : r.severity === sev));
      const filteredProjects = projects.filter(p => (eco === 'all' ? true : p.ecosystem === eco));

      renderOverview(overview);
      renderRecent([
        `Reports: ${overview.reportsTotal}`,
        `Projects analyzed: ${overview.projectsAnalyzed}`,
        `Vulnerable projects: ${overview.vulnerableProjects}`,
        overview.lastScanAt ? `Last scan: ${overview.lastScanAt}` : 'Last scan: --',
      ]);
  currentReportsFiltered = filteredReports;
  renderReports(filteredReports);
      renderProjects(filteredProjects);
      renderTrend(trend);
    }

    // Defer binding and initial load until idle to free up the main thread on first paint
    const scheduleIdle = (cb) => {
      if (typeof window.requestIdleCallback === 'function') {
        window.requestIdleCallback(cb);
      } else {
        setTimeout(cb, 120);
      }
    };

    scheduleIdle(() => {
      document.getElementById('btn-refresh')?.addEventListener('click', () => loadAll());
      document.getElementById('filter-ecosystem')?.addEventListener('change', () => loadAll());
      document.getElementById('filter-severity')?.addEventListener('change', () => loadAll());

      // Export CSV
      document.getElementById('btn-export')?.addEventListener('click', () => {
        const header = ['id','project','severity','issues','createdAt'];
        const rows = currentReportsFiltered.map(r => [r.id, r.project, r.severity, String(r.issues), r.createdAt]);
        const csv = [header, ...rows].map(cols => cols.map(v => '"' + String(v).replaceAll('"','""') + '"').join(',')).join('\n');
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `reports_${Date.now()}.csv`;
        document.body.appendChild(a);
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
      });

      // Initial data load
      loadAll();
    });
  </script>
</Layout>
