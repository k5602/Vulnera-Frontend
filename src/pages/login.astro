---
import Layout from "../layouts/Layout.astro";
import Navigation from "../components/Navigation.astro";
import Footer from "../components/Footer.astro";
---

<Layout title="Login — Vulnera" description="Access your Vulnera account to manage scans and reports.">
  <Navigation />

  <!-- Login Section -->
  <section id="main" class="relative min-h-screen flex items-center justify-center overflow-hidden bg-black" aria-labelledby="login-title" transition:animate="fade">
    <!-- Background Layers (inspired by home) -->
    <div class="absolute inset-0 z-0">
      <div class="absolute inset-0 matrix-rain opacity-20"></div>
      <div class="absolute inset-0 bg-gradient-to-r from-black via-black/80 to-black/60"></div>
      <div class="absolute inset-0 bg-gradient-to-b from-transparent via-matrix-900/20 to-black/80"></div>
    </div>

    <!-- Content -->
    <div class="relative z-10 w-full max-w-md px-4 sm:px-6">
      <div class="mb-4 sm:mb-6 text-center">
        <h1 id="login-title" class="text-2xl sm:text-3xl md:text-4xl font-bold text-white font-mono tracking-wider">
          <span class="text-cyber-400">&gt;</span> LOGIN
        </h1>
        <p id="login-subtitle" class="text-matrix-300 mt-2 text-sm sm:text-base">Authenticate with Huawei</p>
      </div>

      <!-- Card -->
      <div class="terminal-border bg-black/80 rounded-xl p-4 sm:p-6 shadow-xl auth-form">
        <!-- Terminal Header Bar -->
        <div class="flex items-center space-x-2 mb-4">
          <span class="w-3 h-3 rounded-full bg-red-500"></span>
          <span class="w-3 h-3 rounded-full bg-yellow-500"></span>
          <span class="w-3 h-3 rounded-full bg-green-500"></span>
          <span class="ml-3 text-xs text-gray-400">vulnera@auth:~</span>
        </div>

        <!-- Dual Authentication Component (OIDC + Traditional) -->
        <div id="auth-container">
          <!-- React component will be mounted here -->
        </div>

        <!-- Fallback Traditional Login Form (if React fails to load) -->
        <div id="fallback-login" class="hidden">
          <div class="text-center text-yellow-400 text-sm font-mono mb-4">
            ⚠ Loading authentication credentials...
          </div>
          
          <form id="login-form" class="space-y-3 sm:space-y-4">
            <div>
              <label for="email" class="block text-xs sm:text-sm text-cyber-300 mb-1">EMAIL</label>
              <input id="email" name="email" type="email"
                class="w-full px-3 sm:px-4 py-2 sm:py-3 rounded-lg bg-black/60 border border-cyber-400/30 focus:border-cyber-400 focus:ring-2 focus:ring-cyber-400 text-white placeholder-gray-500 text-sm sm:text-base"
                placeholder="you@example.com" required />
            </div>

            <div>
              <div class="flex items-center justify-between mb-1">
                <label for="password" class="block text-xs sm:text-sm text-cyber-300">PASSWORD</label>
                <button type="button" id="toggle-password" class="text-xs text-cyber-400 hover:text-cyber-300">[SHOW]</button>
              </div>
              <input id="password" name="password" type="password" required minlength="4"
                class="w-full px-3 sm:px-4 py-2 sm:py-3 rounded-lg bg-black/60 border border-cyber-400/30 focus:border-cyber-400 focus:ring-2 focus:ring-cyber-400 text-white placeholder-gray-500 text-sm sm:text-base"
                placeholder="********" />
            </div>

            <div class="flex items-center justify-between">
              <label class="inline-flex items-center gap-2 text-xs sm:text-sm text-matrix-300">
                <input id="remember" name="remember" type="checkbox" class="accent-cyber-400" />
                Remember me
              </label>
              <a href="#" class="text-xs sm:text-sm text-cyber-400 hover:text-cyber-300">Forgot password?</a>
            </div>

            <button type="submit" id="login-submit"
              class="w-full inline-flex items-center justify-center bg-gradient-to-r from-cyber-600 to-matrix-600 hover:from-cyber-500 hover:to-matrix-500 text-black px-4 sm:px-6 py-2.5 sm:py-3 rounded-lg font-bold font-mono transition-all duration-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-cyber-400 text-sm sm:text-base">
              <span class="mr-2">&gt;</span> LOGIN
            </button>
          </form>
        </div>
        <!-- Enhanced transition to signup -->
        <div class="text-center text-green-300 mt-4 sm:mt-6">
          <span class="text-gray-400 text-xs sm:text-sm">No account?</span>
          <a id="signup-link" href="/signup" class="auth-link text-cyan-300 hover:text-cyan-200 transition-colors ml-2 text-xs sm:text-sm" data-astro-prefetch>
            Create one
          </a>
        </div>

        <p class="mt-4 sm:mt-6 text-center text-xs text-gray-500">By continuing, you agree to our <a href="#" class="underline">Terms</a>.</p>
      </div>

      <!-- Footer hint -->
      <p class="mt-6 text-center text-xs text-gray-500">Protected by enterprise-grade security.</p>
    </div>
  </section>

  <Footer />

  <script type="module">
    console.log('Login page JavaScript loaded');
    
    // Import and mount the React Dual Authentication component
    async function initAuth() {
      try {
        const { createElement } = await import('react');
        const { createRoot } = await import('react-dom/client');
        const { default: DualAuthComponent } = await import('../components/auth/DualAuthComponent.js');
        
        const container = document.getElementById('auth-container');
        if (container) {
          const root = createRoot(container);
          root.render(createElement(DualAuthComponent));
          console.log('Dual Authentication component mounted successfully');
        }
      } catch (error) {
        console.error('Failed to load authentication component:', error);
        // Show fallback traditional login form
        const fallback = document.getElementById('fallback-login');
        const authContainer = document.getElementById('auth-container');
        if (fallback && authContainer) {
          authContainer.innerHTML = '';
          fallback.classList.remove('hidden');
          initFallbackLogin();
        }
      }
    }

    // Fallback traditional login functionality
    function initFallbackLogin() {
      const form = document.getElementById('login-form');
      const toggle = document.getElementById('toggle-password');
      const pw = document.getElementById('password');
      
      // Password toggle functionality
      toggle?.addEventListener('click', () => {
        const isPw = pw?.getAttribute('type') === 'password';
        pw?.setAttribute('type', isPw ? 'text' : 'password');
        toggle.textContent = isPw ? '[HIDE]' : '[SHOW]';
      });

      // Form submission
      form?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const email = document.getElementById('email').value?.trim() || '';
        const password = document.getElementById('password').value || '';
        const remember = document.getElementById('remember').checked || false;
        
        if (!email || !email.includes('@')) {
          alert('Please enter a valid email address');
          return;
        }
        
        if (!password || password.length < 4) {
          alert('Password must be at least 4 characters');
          return;
        }

        // Show loading state
        const submitBtn = document.getElementById('login-submit');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<span class="mr-2">&gt;</span> AUTHENTICATING...';
        submitBtn.disabled = true;

        try {
          // Simulate API call (replace with actual API)
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // Create demo token
          const token = `demo.${btoa(email)}.${Date.now()}`;
          
          // Store token
          if (remember) {
            localStorage.setItem('auth_token', token);
            localStorage.setItem('user_email', email);
          } else {
            sessionStorage.setItem('auth_token', token);
            sessionStorage.setItem('user_email', email);
          }

          // Redirect to dashboard or next page
          const params = new URLSearchParams(location.search);
          const next = params.get('next');
          const target = next && /^\/[a-zA-Z0-9_\-/]*$/.test(next) ? next : '/dashboard';
          window.location.href = target;
          
        } catch (error) {
          alert('Login failed. Please try again.');
        } finally {
          submitBtn.innerHTML = originalText;
          submitBtn.disabled = false;
        }
      });
    }

    // Determine post-login target from query (?next=/path)
    const params = new URLSearchParams(location.search);
    const nextParam = params.get('next');
    const safeNext = nextParam && /^\/[a-zA-Z0-9_\-/]*$/.test(nextParam) ? nextParam : '/dashboard';

    // Update subtitle to reflect the destination
    try {
      const subtitle = document.getElementById('login-subtitle');
      if (subtitle) {
        let dest = 'requested page';
        if (safeNext.startsWith('/scan')) dest = 'scan';
        else if (safeNext.startsWith('/dashboard')) dest = 'dashboard';
        else if (safeNext === '/' || safeNext.startsWith('/index')) dest = 'home';
        subtitle.textContent = `Authenticate to access the ${dest}`;
      }
      const signup = document.getElementById('signup-link');
      if (signup && signup instanceof HTMLAnchorElement) {
        const url = new URL(signup.href, location.origin);
        url.searchParams.set('next', safeNext);
        signup.href = url.pathname + url.search;
      }
    } catch {}

    // Page entrance animation
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM loaded, initializing login page...');
      const authForm = document.querySelector('.auth-form');
      if (authForm) {
        authForm.classList.add('transitioning-in');
        console.log('Added transitioning-in class for page entrance');
      }
      
      // Initialize authentication component
      initAuth();
    });
  </script>
</Layout>
