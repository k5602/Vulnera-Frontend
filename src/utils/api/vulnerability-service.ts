/**
 * Vulnerability Service
 * Handles vulnerability data operations
 */

import { API_ENDPOINTS } from '../../config/api';
import { apiClient, type ApiResponse } from './client';

export interface VulnerabilityDetail {
  id: string;
  cveId: string;
  ghsaId?: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  description: string;
  affectedVersions: string[];
  fixedVersion?: string;
  cvssScore?: number;
  cvssVector?: string;
  references: Array<{
    type: 'advisory' | 'issue' | 'fix' | 'other';
    url: string;
  }>;
  publishedDate: string;
  modifiedDate: string;
}

export interface VulnerabilityListResponse {
  vulnerabilities: VulnerabilityDetail[];
  total: number;
  page: number;
  pageSize: number;
}

export interface SearchRequest {
  query: string;
  ecosystem?: string;
  severity?: string;
  page?: number;
  pageSize?: number;
}

export interface CacheRefreshResponse {
  success: boolean;
  message: string;
  cacheSize?: number;
  packagesCount?: number;
  timestamp: string;
}

class VulnerabilityService {
  /**
   * Get vulnerability details by ID
   * GET /api/v1/vulnerabilities/{id}
   */
  async getVulnerability(vulnerabilityId: string): Promise<ApiResponse<VulnerabilityDetail>> {
    const endpoint = apiClient.replacePath(API_ENDPOINTS.VULNERABILITIES.GET, {
      id: vulnerabilityId,
    });
    return apiClient.get<VulnerabilityDetail>(endpoint);
  }

  /**
   * List vulnerabilities with pagination
   * GET /api/v1/vulnerabilities
   */
  async listVulnerabilities(
    page: number = 1,
    pageSize: number = 20
  ): Promise<ApiResponse<VulnerabilityListResponse>> {
    const endpoint = `${API_ENDPOINTS.VULNERABILITIES.LIST}?page=${page}&pageSize=${pageSize}`;
    return apiClient.get<VulnerabilityListResponse>(endpoint);
  }

  /**
   * Refresh popular packages vulnerability cache
   * POST /api/v1/vulnerabilities/refresh-cache
   */
  async refreshCache(): Promise<ApiResponse<CacheRefreshResponse>> {
    return apiClient.post<CacheRefreshResponse>(
      API_ENDPOINTS.VULNERABILITIES.LIST.replace(/\?.*$/, '') + '/refresh-cache',
      {}
    );
  }

  /**
   * Search vulnerabilities
   */
  async searchVulnerabilities(request: SearchRequest): Promise<ApiResponse<VulnerabilityListResponse>> {
    const params = new URLSearchParams({
      query: request.query,
      ...(request.ecosystem && { ecosystem: request.ecosystem }),
      ...(request.severity && { severity: request.severity }),
      page: String(request.page || 1),
      pageSize: String(request.pageSize || 20),
    });

    const endpoint = `${API_ENDPOINTS.VULNERABILITIES.SEARCH}?${params.toString()}`;
    return apiClient.get<VulnerabilityListResponse>(endpoint);
  }

  /**
   * Get vulnerabilities by CVE ID
   */
  async searchByCve(cveId: string): Promise<ApiResponse<VulnerabilityDetail[]>> {
    return this.searchVulnerabilities({ query: cveId }).then((response) => ({
      ...response,
      data: response.data?.vulnerabilities,
    }));
  }

  /**
   * Get vulnerabilities by severity
   */
  async getVulnerabilitiesBySeverity(
    severity: 'critical' | 'high' | 'medium' | 'low',
    page: number = 1,
    pageSize: number = 20
  ): Promise<ApiResponse<VulnerabilityListResponse>> {
    return this.searchVulnerabilities({
      query: '*',
      severity,
      page,
      pageSize,
    });
  }
}

export const vulnerabilityService = new VulnerabilityService();
